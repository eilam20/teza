
from django.shortcuts import render

from django.http import JsonResponse

from asgiref.sync import sync_to_async
from .models import Submission



async def call_gemini_api(prompt, api_key):
    """
    Sends an asynchronous request to the Gemini API and returns the response.

    :param prompt: The text input for the model.
    :param api_key: Your API key for authenticating with the Gemini API.
    :return: The generated response from the Gemini API.
    """
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
    headers = {
        "Content-Type": "application/json"
    }
    params = {
        "key": api_key
    }
    data = {
        "contents": [
            {
                "parts": [{"text": prompt}]
            }
        ]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, params=params, json=data) as response:
                response.raise_for_status()  # Raise exception for HTTP errors
                response_data = await response.json()  # Parse JSON response asynchronously
                return response_data  # Return the entire JSON response
    except aiohttp.ClientError as e:
        print(f"Gemini API Error: {e}")
        return {"error": str(e)}



def count_capitalized_words(text):
    """Counts words that start with a capital letter."""
    words = text.split()
    return sum(1 for word in words if word.istitle())


def count_words_followed_by_numbers(text):
    """
    Counts words followed directly by a number (e.g., 'Band 1975').
    """
    import re
    pattern = r'\b\w+\s+\d+\b'  # Matches words followed by numbers with a space
    matches = re.findall(pattern, text)
    return len(matches)
async def generate_content(request):
    if request.method == "POST":
        name = request.POST.get("name")
        band = request.POST.get("band")
        year = int(request.POST.get("year"))
        gemini_api_key = request.POST.get("api_key")  # Gemini API key for text generation

        # Determine if the year is even or odd
        is_even = year % 2 == 0

        # Step 1: **Generate Text using Gemini** (Keeping Original Logic)
        text_prompt = f"Describe what happened in {year} for {band} and why someone likes them."
        api_response = await call_gemini_api(text_prompt, gemini_api_key)

        if "error" in api_response:
            generated_text = "An error occurred while generating content."
        else:
            try:
                generated_text = api_response["candidates"][0]["content"]["parts"][0]["text"]
            except (KeyError, IndexError):
                generated_text = "No content was generated by the Gemini API."

        capitalized_words_count = count_capitalized_words(generated_text)
        words_followed_by_numbers = count_words_followed_by_numbers(generated_text)


        # Step 3: **Save the submission to the database**
        submission = await sync_to_async(Submission.objects.create)(
            name=name,
            band=band,
            year=year,
            generated_text=generated_text,
            capitalized_words_count=capitalized_words_count,
            words_followed_by_numbers=words_followed_by_numbers,
        )

        # Step 4: **Return JSON Response**
        return JsonResponse({
            "name": submission.name,
            "band": submission.band,
            "year": submission.year,
            "is_even": is_even,
            "generated_text": submission.generated_text,
            "capitalized_words_count": capitalized_words_count,
            "words_followed_by_numbers": words_followed_by_numbers
        })

import aiohttp


def index(request):
    last_submission = Submission.objects.last()  # Get the latest submission
    if last_submission:
        year_parity = "Even" if last_submission.is_year_even() else "Odd"
    else:
        year_parity = None

    # Add the years range to the context
    years = range(1960, 2026)

    return render(request, "teza_app/index.html", {
        "last_submission": last_submission,
        "year_parity": year_parity,
        "years": years  # Pass the years to the template
    })